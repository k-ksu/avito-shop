package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/k-ksu/avito-shop/internal/service.MerchCacher -o ./internal/service/mocks/merch_cacher.go -n MerchCacher

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/k-ksu/avito-shop/internal/model"
)

// MerchCacher implements service.MerchCacher
type MerchCacher struct {
	t minimock.Tester

	funcAdd          func(item model.Merch)
	inspectFuncAdd   func(item model.Merch)
	afterAddCounter  uint64
	beforeAddCounter uint64
	AddMock          mMerchCacherAdd

	funcGet          func(name string) (m1 model.Merch, b1 bool)
	inspectFuncGet   func(name string)
	afterGetCounter  uint64
	beforeGetCounter uint64
	GetMock          mMerchCacherGet
}

// NewMerchCacher returns a mock for service.MerchCacher
func NewMerchCacher(t minimock.Tester) *MerchCacher {
	m := &MerchCacher{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AddMock = mMerchCacherAdd{mock: m}
	m.AddMock.callArgs = []*MerchCacherAddParams{}

	m.GetMock = mMerchCacherGet{mock: m}
	m.GetMock.callArgs = []*MerchCacherGetParams{}

	return m
}

type mMerchCacherAdd struct {
	mock               *MerchCacher
	defaultExpectation *MerchCacherAddExpectation
	expectations       []*MerchCacherAddExpectation

	callArgs []*MerchCacherAddParams
	mutex    sync.RWMutex
}

// MerchCacherAddExpectation specifies expectation struct of the MerchCacher.Add
type MerchCacherAddExpectation struct {
	mock   *MerchCacher
	params *MerchCacherAddParams

	Counter uint64
}

// MerchCacherAddParams contains parameters of the MerchCacher.Add
type MerchCacherAddParams struct {
	item model.Merch
}

// Expect sets up expected params for MerchCacher.Add
func (mmAdd *mMerchCacherAdd) Expect(item model.Merch) *mMerchCacherAdd {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("MerchCacher.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &MerchCacherAddExpectation{}
	}

	mmAdd.defaultExpectation.params = &MerchCacherAddParams{item}
	for _, e := range mmAdd.expectations {
		if minimock.Equal(e.params, mmAdd.defaultExpectation.params) {
			mmAdd.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmAdd.defaultExpectation.params)
		}
	}

	return mmAdd
}

// Inspect accepts an inspector function that has same arguments as the MerchCacher.Add
func (mmAdd *mMerchCacherAdd) Inspect(f func(item model.Merch)) *mMerchCacherAdd {
	if mmAdd.mock.inspectFuncAdd != nil {
		mmAdd.mock.t.Fatalf("Inspect function is already set for MerchCacher.Add")
	}

	mmAdd.mock.inspectFuncAdd = f

	return mmAdd
}

// Return sets up results that will be returned by MerchCacher.Add
func (mmAdd *mMerchCacherAdd) Return() *MerchCacher {
	if mmAdd.mock.funcAdd != nil {
		mmAdd.mock.t.Fatalf("MerchCacher.Add mock is already set by Set")
	}

	if mmAdd.defaultExpectation == nil {
		mmAdd.defaultExpectation = &MerchCacherAddExpectation{mock: mmAdd.mock}
	}

	return mmAdd.mock
}

// Set uses given function f to mock the MerchCacher.Add method
func (mmAdd *mMerchCacherAdd) Set(f func(item model.Merch)) *MerchCacher {
	if mmAdd.defaultExpectation != nil {
		mmAdd.mock.t.Fatalf("Default expectation is already set for the MerchCacher.Add method")
	}

	if len(mmAdd.expectations) > 0 {
		mmAdd.mock.t.Fatalf("Some expectations are already set for the MerchCacher.Add method")
	}

	mmAdd.mock.funcAdd = f
	return mmAdd.mock
}

// Add implements service.MerchCacher
func (mmAdd *MerchCacher) Add(item model.Merch) {
	mm_atomic.AddUint64(&mmAdd.beforeAddCounter, 1)
	defer mm_atomic.AddUint64(&mmAdd.afterAddCounter, 1)

	if mmAdd.inspectFuncAdd != nil {
		mmAdd.inspectFuncAdd(item)
	}

	mm_params := &MerchCacherAddParams{item}

	// Record call args
	mmAdd.AddMock.mutex.Lock()
	mmAdd.AddMock.callArgs = append(mmAdd.AddMock.callArgs, mm_params)
	mmAdd.AddMock.mutex.Unlock()

	for _, e := range mmAdd.AddMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return
		}
	}

	if mmAdd.AddMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAdd.AddMock.defaultExpectation.Counter, 1)
		mm_want := mmAdd.AddMock.defaultExpectation.params
		mm_got := MerchCacherAddParams{item}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmAdd.t.Errorf("MerchCacher.Add got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		return

	}
	if mmAdd.funcAdd != nil {
		mmAdd.funcAdd(item)
		return
	}
	mmAdd.t.Fatalf("Unexpected call to MerchCacher.Add. %v", item)

}

// AddAfterCounter returns a count of finished MerchCacher.Add invocations
func (mmAdd *MerchCacher) AddAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.afterAddCounter)
}

// AddBeforeCounter returns a count of MerchCacher.Add invocations
func (mmAdd *MerchCacher) AddBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAdd.beforeAddCounter)
}

// Calls returns a list of arguments used in each call to MerchCacher.Add.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmAdd *mMerchCacherAdd) Calls() []*MerchCacherAddParams {
	mmAdd.mutex.RLock()

	argCopy := make([]*MerchCacherAddParams, len(mmAdd.callArgs))
	copy(argCopy, mmAdd.callArgs)

	mmAdd.mutex.RUnlock()

	return argCopy
}

// MinimockAddDone returns true if the count of the Add invocations corresponds
// the number of defined expectations
func (m *MerchCacher) MinimockAddDone() bool {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		return false
	}
	return true
}

// MinimockAddInspect logs each unmet expectation
func (m *MerchCacher) MinimockAddInspect() {
	for _, e := range m.AddMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MerchCacher.Add with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AddMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		if m.AddMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MerchCacher.Add")
		} else {
			m.t.Errorf("Expected call to MerchCacher.Add with params: %#v", *m.AddMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAdd != nil && mm_atomic.LoadUint64(&m.afterAddCounter) < 1 {
		m.t.Error("Expected call to MerchCacher.Add")
	}
}

type mMerchCacherGet struct {
	mock               *MerchCacher
	defaultExpectation *MerchCacherGetExpectation
	expectations       []*MerchCacherGetExpectation

	callArgs []*MerchCacherGetParams
	mutex    sync.RWMutex
}

// MerchCacherGetExpectation specifies expectation struct of the MerchCacher.Get
type MerchCacherGetExpectation struct {
	mock    *MerchCacher
	params  *MerchCacherGetParams
	results *MerchCacherGetResults
	Counter uint64
}

// MerchCacherGetParams contains parameters of the MerchCacher.Get
type MerchCacherGetParams struct {
	name string
}

// MerchCacherGetResults contains results of the MerchCacher.Get
type MerchCacherGetResults struct {
	m1 model.Merch
	b1 bool
}

// Expect sets up expected params for MerchCacher.Get
func (mmGet *mMerchCacherGet) Expect(name string) *mMerchCacherGet {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("MerchCacher.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &MerchCacherGetExpectation{}
	}

	mmGet.defaultExpectation.params = &MerchCacherGetParams{name}
	for _, e := range mmGet.expectations {
		if minimock.Equal(e.params, mmGet.defaultExpectation.params) {
			mmGet.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGet.defaultExpectation.params)
		}
	}

	return mmGet
}

// Inspect accepts an inspector function that has same arguments as the MerchCacher.Get
func (mmGet *mMerchCacherGet) Inspect(f func(name string)) *mMerchCacherGet {
	if mmGet.mock.inspectFuncGet != nil {
		mmGet.mock.t.Fatalf("Inspect function is already set for MerchCacher.Get")
	}

	mmGet.mock.inspectFuncGet = f

	return mmGet
}

// Return sets up results that will be returned by MerchCacher.Get
func (mmGet *mMerchCacherGet) Return(m1 model.Merch, b1 bool) *MerchCacher {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("MerchCacher.Get mock is already set by Set")
	}

	if mmGet.defaultExpectation == nil {
		mmGet.defaultExpectation = &MerchCacherGetExpectation{mock: mmGet.mock}
	}
	mmGet.defaultExpectation.results = &MerchCacherGetResults{m1, b1}
	return mmGet.mock
}

// Set uses given function f to mock the MerchCacher.Get method
func (mmGet *mMerchCacherGet) Set(f func(name string) (m1 model.Merch, b1 bool)) *MerchCacher {
	if mmGet.defaultExpectation != nil {
		mmGet.mock.t.Fatalf("Default expectation is already set for the MerchCacher.Get method")
	}

	if len(mmGet.expectations) > 0 {
		mmGet.mock.t.Fatalf("Some expectations are already set for the MerchCacher.Get method")
	}

	mmGet.mock.funcGet = f
	return mmGet.mock
}

// When sets expectation for the MerchCacher.Get which will trigger the result defined by the following
// Then helper
func (mmGet *mMerchCacherGet) When(name string) *MerchCacherGetExpectation {
	if mmGet.mock.funcGet != nil {
		mmGet.mock.t.Fatalf("MerchCacher.Get mock is already set by Set")
	}

	expectation := &MerchCacherGetExpectation{
		mock:   mmGet.mock,
		params: &MerchCacherGetParams{name},
	}
	mmGet.expectations = append(mmGet.expectations, expectation)
	return expectation
}

// Then sets up MerchCacher.Get return parameters for the expectation previously defined by the When method
func (e *MerchCacherGetExpectation) Then(m1 model.Merch, b1 bool) *MerchCacher {
	e.results = &MerchCacherGetResults{m1, b1}
	return e.mock
}

// Get implements service.MerchCacher
func (mmGet *MerchCacher) Get(name string) (m1 model.Merch, b1 bool) {
	mm_atomic.AddUint64(&mmGet.beforeGetCounter, 1)
	defer mm_atomic.AddUint64(&mmGet.afterGetCounter, 1)

	if mmGet.inspectFuncGet != nil {
		mmGet.inspectFuncGet(name)
	}

	mm_params := &MerchCacherGetParams{name}

	// Record call args
	mmGet.GetMock.mutex.Lock()
	mmGet.GetMock.callArgs = append(mmGet.GetMock.callArgs, mm_params)
	mmGet.GetMock.mutex.Unlock()

	for _, e := range mmGet.GetMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.m1, e.results.b1
		}
	}

	if mmGet.GetMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGet.GetMock.defaultExpectation.Counter, 1)
		mm_want := mmGet.GetMock.defaultExpectation.params
		mm_got := MerchCacherGetParams{name}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGet.t.Errorf("MerchCacher.Get got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGet.GetMock.defaultExpectation.results
		if mm_results == nil {
			mmGet.t.Fatal("No results are set for the MerchCacher.Get")
		}
		return (*mm_results).m1, (*mm_results).b1
	}
	if mmGet.funcGet != nil {
		return mmGet.funcGet(name)
	}
	mmGet.t.Fatalf("Unexpected call to MerchCacher.Get. %v", name)
	return
}

// GetAfterCounter returns a count of finished MerchCacher.Get invocations
func (mmGet *MerchCacher) GetAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.afterGetCounter)
}

// GetBeforeCounter returns a count of MerchCacher.Get invocations
func (mmGet *MerchCacher) GetBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGet.beforeGetCounter)
}

// Calls returns a list of arguments used in each call to MerchCacher.Get.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGet *mMerchCacherGet) Calls() []*MerchCacherGetParams {
	mmGet.mutex.RLock()

	argCopy := make([]*MerchCacherGetParams, len(mmGet.callArgs))
	copy(argCopy, mmGet.callArgs)

	mmGet.mutex.RUnlock()

	return argCopy
}

// MinimockGetDone returns true if the count of the Get invocations corresponds
// the number of defined expectations
func (m *MerchCacher) MinimockGetDone() bool {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetInspect logs each unmet expectation
func (m *MerchCacher) MinimockGetInspect() {
	for _, e := range m.GetMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MerchCacher.Get with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		if m.GetMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MerchCacher.Get")
		} else {
			m.t.Errorf("Expected call to MerchCacher.Get with params: %#v", *m.GetMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGet != nil && mm_atomic.LoadUint64(&m.afterGetCounter) < 1 {
		m.t.Error("Expected call to MerchCacher.Get")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MerchCacher) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAddInspect()

		m.MinimockGetInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MerchCacher) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MerchCacher) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAddDone() &&
		m.MinimockGetDone()
}
